# for NordVPN
name: Docker Image CI

on:
  workflow_dispatch:
  # push:
  #  paths-ignore:
  #     - '.github/**'
  #     - '*.md'
  #     - '.*'
  #     - '.LICENSE'
  #     - 'examples'
    # branches: [ "main" ]
    # tags: [ 'v*.*.*' ]
  # pull_request:
    # branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # name of image
  IMAGE: nordvpn
  # github.repository as <account>/<repo>
  IMAGE_NAME: r3ps4j/nordvpn
  # cosign version
  COSIGN_VER: 'v1.13.1'
  # Build args
  BUILD_ARGS: |
    "UBUNTU_VER=${{ vars.UBUNTU_VER }}"
    "NORDVPN_VERSION=3.16.1"

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - uses: actions/checkout@v3

      # Setup QEMU for multi-arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64

      - name: Setup iptables
        run: |
          # enable necessary kernel modules
          sudo ip6tables --list >/dev/null
          # enable necessary sysctls
          sudo sysctl -w kernel.modules_disabled=0
          sudo sysctl -w net.ipv4.conf.all.route_localnet=1
          sudo sysctl -w net.bridge.bridge-nf-call-iptables=1
          sudo sysctl -w net.ipv4.ip_forward=1
          # load modules
          # sudo modprobe /lib/modules/$(uname -r)/kernel/net/ipv4/netfilter/ip_tables.ko
          # sudo modprobe /lib/modules/$(uname -r)/kernel/net/ipv4/netfilter/iptable_filter.ko
          # sudo modprobe /lib/modules/$(uname -r)/kernel/net/ipv4/netfilter/iptable_mangle.ko
          # sudo modprobe /lib/modules/$(uname -r)/kernel/net/ipv4/netfilter/iptable_nat.ko
          # sudo modprobe /lib/modules/$(uname -r)/kernel/net/ipv4/netfilter/iptable_raw.ko
          # sudo modprobe /lib/modules/$(uname -r)/kernel/net/ipv4/netfilter/iptable_security.ko
          sudo modprobe ip_tables
          sudo modprobe iptable_filter
          sudo modprobe iptable_mangle
          sudo modprobe iptable_nat
          sudo modprobe iptable_raw
          sudo modprobe iptable_security
          # sudo echo 'ip_tables' >> /etc/modules
          sudo iptables -t nat -I POSTROUTING -s 127.0.0.0/8 ! -d 127.0.0.0/8 -j MASQUERADE

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --allow-insecure-entitlement security.insecure

      ## Login against a Docker registry except on PR
      ## https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and run Docker image with Buildx
      # https://github.com/docker/build-push-action
      # - name: Build Docker image amd64
      #   id: build-amd64
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     platforms: linux/amd64
      #     file: ${{ env.IMAGE }}.dockerfile
      #     build-args: ${{ env.BUILD_ARGS }}
      #     push: false
      #     tags: ${{ env.IMAGE_NAME }}:amd64
      #     labels: ${{ steps.meta.outputs.labels }}
      #     load: true
      #     cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64
      #     cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64,mode=max

      # - name: Run Docker image amd64
      #   run: |
      #    docker run --platform linux/amd64 --rm --cap-add NET_ADMIN ${{ env.IMAGE_NAME }}:amd64 bash -c \
      #    "iptables -V && iptables -L && ls -alh /usr/sbin/iptables* && 00-firewall && 10-inet && 20-tun && 30-route"

      - name: Build Docker image arm64
        id: build-arm64
        uses: docker/build-push-action@v4
        with:
          context: .
          allow: security.insecure
          platforms: linux/arm64
          file: ${{ env.IMAGE }}.dockerfile
          build-args: ${{ env.BUILD_ARGS }}
          push: false
          tags: ${{ env.IMAGE_NAME }}:arm64
          labels: ${{ steps.meta.outputs.labels }}
          load: true
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64
          cache-from: type=regstry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64,mode=max

      - name: Run Docker image arm64
        run: |
          docker run --platform linux/arm64 --rm --cap-add NET_ADMIN \
          --sysctl net.ipv4.conf.all.route_localnet=1 --sysctl net.bridge.bridge-nf-call-iptables=1 --sysctl net.ipv4.ip_forward=1 \
          ${{ env.IMAGE_NAME }}:arm64 bash -c \
          "iptables -V && iptables -L"

      # Build image only with Buildx (inline)
      # https://github.com/docker/build-push-action
      # - name: Build Docker image
      #   id: build
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: .
      #     platforms: linux/amd64,linux/arm64
      #     file: ${{ env.IMAGE }}.dockerfile
      #     build-args: ${{ env.BUILD_ARGS }}
      #     push: false
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Multi-arch NordVPN for Docker
      #     cache-to: type=inline
      #     cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
