## for NordVPN
name: GitHub Package

## This workflow uses actions that are not certified by GitHub.
## They are provided by a third-party and are governed by
## separate terms of service, privacy policy, and support
## documentation.

on:
  workflow_dispatch:
  schedule:
    - cron: '33 00 * * *'
  release:
    types: [published]
  # push:
  #   paths-ignore:
  #     - '.github/**'
  #     - '*.md'
  #     - '.*'
  #     - '.LICENSE'
  #     - 'examples'
  #   branches: [ "main", "develop" ]

env:
  ## Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  ## name of image
  IMAGE: nordvpn
  ## github.repository as <account>/<repo>
  IMAGE_NAME: tmknight/nordvpn
  ## cosign version
  COSIGN_VER: 'v1.13.1'
  ## Build args
  BUILD_ARGS: |
    "UBUNTU_VER=${{ vars.UBUNTU_VER }}"
    "NORDVPN_VERSION=3.16.3"
    # "NORDVPN_VERSION=${{ vars.NORDVPN_VERSION }}"

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      ## This is used to complete the identity challenge
      ## with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      ## Install the cosign tool except on PR
      ## https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
        with:
          ## cosign-release: 'v1.11.0'
          ## cosign-release: 'v1.13.1'
          cosign-release: ${{ env.COSIGN_VER }}

      ## Setup QEMU for multi-arch
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: amd64,arm64

      ## Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      ## Login against a Docker registry except on PR
      ## https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ## Extract metadata (tags, labels) for Docker
      ## https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      
      ## Latest 
      - if: github.event == 'schedule'
        name: Conditional(Set tag/label as `latest`)
        run: |
          echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_ENV
          echo "label=${{ steps.meta.outputs.labels }}
            org.opencontainers.image.version=latest" >> $GITHUB_ENV
      
      ## Current
      - if: github.event != 'schedule'
        name: Conditional(Set tag/label as called)
        run: |
          echo "tag=${{ steps.meta.outputs.tags }}" >> $GITHUB_ENV; \
          echo "label=${{ steps.meta.outputs.labels }}" >> $GITHUB_ENV
          
      ## Build and push Docker image with Buildx (don't push on PR)
      ## https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ${{ env.IMAGE }}.dockerfile
          build-args: ${{ env.BUILD_ARGS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.tag }}
          labels: ${{ env.label }}
          outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=Multi-arch NordVPN for Docker
          cache-from: type=gha
          cache-to: type=gha,mode=max

      ## Sign the resulting Docker image digest except on PRs.
      ## This will only write to the public Rekor transparency log when the Docker
      ## repository is public to avoid leaking data.  If you would like to publish
      ## transparency data even for private images, pass --force to cosign below.
      ## https://github.com/sigstore/cosign
      - name: Write signing key to disk
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        run: 'echo "$KEY" > cosign.key'

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "false"
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        ## This step uses the identity token to provision an ephemeral certificate
        ## against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign --key cosign.key {}@${{ steps.build-and-push.outputs.digest }}
